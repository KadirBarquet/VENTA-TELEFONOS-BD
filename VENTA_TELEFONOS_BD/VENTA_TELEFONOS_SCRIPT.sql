----DDL BD VENTA_TELEFONOS
----CREACION DE BD VENTA_TELEFONOS
CREATE DATABASE VENTA_TELEFONOS
ON 
PRIMARY(NAME='VENTA_TELEFONOS_DATA',
        FILENAME='C:\SQL_FILES\VENTA_TELEFONOS_DATA.mdf',
	SIZE=10,
	MAXSIZE=20,
	FILEGROWTH=1)

LOG ON(NAME='VENTA_TELEFONOS_LOG',
       FILENAME='C:\SQL_FILES\VENTA_TELEFONOS_LOG.ldf')
GO

----USO DE BD CREADA
USE VENTA_TELEFONOS
GO

----CREACION DE TABLAS
CREATE TABLE MARCA (
  IDMARCA INT NOT NULL,
  NOMBRE VARCHAR(100) CONSTRAINT UQ_MARCA UNIQUE,
  PRIMARY KEY (IDMARCA)
)
GO

CREATE TABLE MODELO (
  IDMODELO INT NOT NULL,
  IDMARCA INT NULL, 
  NOMBRE VARCHAR(100),
  PRIMARY KEY (IDMODELO)
) 
GO

CREATE TABLE TELEFONO (
  IDTELEFONO INT NOT NULL,
  IDMODELO INT NULL,
  IMEI VARCHAR(20) CONSTRAINT UQ_IMEI_TELEFONO UNIQUE,
  DESCRIPCION VARCHAR(500), 
  ANIO INT,
  PRECIO REAL,
  PRIMARY KEY (IDTELEFONO)
)
GO

CREATE TABLE CLIENTE (
  IDCLIENTE INT IDENTITY NOT NULL,
  CODIGO VARCHAR(8) UNIQUE,
  NOMBRES VARCHAR(100) NOT NULL, 
  CEDULA VARCHAR(10) UNIQUE NULL,
  TELEFONO VARCHAR(10) UNIQUE NULL, 
  FECHA_NAC DATE,
  GENERO INT,
  PRIMARY KEY (IDCLIENTE)
)
GO

CREATE TABLE VENTA (
  IDVENTA INT NOT NULL,
  IDCLIENTE INT NULL,
  FECHA_REGISTRO DATE,
  SUBTOTAL REAL,
  IVA REAL,
  DSCTO REAL,
  TOTAL REAL,
  PRIMARY KEY (IDVENTA)
)
GO

CREATE TABLE VENTADETALLE (
  IDVENTADETALLE INT NOT NULL,
  IDVENTA INT NULL,
  IDTELEFONO INT NULL,
  CANT INT,
  PRECIO REAL, 
  SUBTOTAL REAL,
  PRIMARY KEY (IDVENTADETALLE)
)
GO

----ALTERACION DE TABLAS PARA RELACIONES
ALTER TABLE MODELO
ADD CONSTRAINT FK_MARCA_MODELO FOREIGN KEY (IDMARCA) REFERENCES MARCA(IDMARCA)
GO

ALTER TABLE TELEFONO
ADD CONSTRAINT FK_MODELO_TELEFONO FOREIGN KEY (IDMODELO) REFERENCES MODELO(IDMODELO)
GO

ALTER TABLE VENTA
ADD CONSTRAINT FK_CLIENTE_VENTA FOREIGN KEY (IDCLIENTE) REFERENCES CLIENTE(IDCLIENTE)
GO

ALTER TABLE VENTADETALLE
ADD CONSTRAINT FK_VENTA_VENTADETALLE FOREIGN KEY (IDVENTA) REFERENCES VENTA(IDVENTA);
ALTER TABLE VENTADETALLE
ADD CONSTRAINT FK_TELEFONO_VENTADETALLE FOREIGN KEY (IDTELEFONO) REFERENCES TELEFONO(IDTELEFONO)
GO

----ALTERACION DE TABLAS PARA RESTRICCION DE NUMEROS POSITIVOS
ALTER TABLE TELEFONO 
ADD CONSTRAINT CK_TELEFONO_ANIO_POSITIVO CHECK(ANIO > 0);
ALTER TABLE TELEFONO 
ADD CONSTRAINT CK_TELEFONO_PRECIO_POSITIVO CHECK(PRECIO > 0)
GO

ALTER TABLE CLIENTE 
ADD CONSTRAINT CK_CLIENTE_GENERO_POSITIVO CHECK(GENERO > 0)
GO

ALTER TABLE VENTA 
ADD CONSTRAINT CK_VENTA_SUBTOTAL_POSITIVO CHECK(SUBTOTAL >= 0);
ALTER TABLE VENTA 
ADD CONSTRAINT CK_VENTA_IVA_POSITIVO CHECK(IVA >= 0);
ALTER TABLE VENTA
ADD CONSTRAINT CK_VENTA_DSCTO_POSITIVO CHECK(DSCTO >= 0);
ALTER TABLE VENTA
ADD CONSTRAINT CK_VENTA_TOTAL_POSITIVO CHECK(TOTAL >= 0)
GO

ALTER TABLE VENTADETALLE
ADD CONSTRAINT CK_VENTADETALLE_CANT_POSITIVO CHECK(CANT > 0);
ALTER TABLE VENTADETALLE
ADD CONSTRAINT CK_VENTADETALLE_PRECIO_POSITIVO CHECK(PRECIO > 0);
ALTER TABLE VENTADETALLE
ADD CONSTRAINT CK_VENTADETALLE_SUBTOTAL_POSITIVO CHECK(SUBTOTAL >= 0)
GO

----DML BD VENTA_TELEFONOS
----INGRESAR 25 REGISTROS A CADA TABLA

----INGRESAR MARCAS DE TELEFONOS
SELECT * FROM MARCA ORDER BY IDMARCA ASC;
INSERT INTO MARCA (IDMARCA, NOMBRE) VALUES 
(1, 'SAMSUNG'), 
(2, 'IPHONE'),
(3, 'REDMI'), 
(4, 'ONEPLUS'), 
(5, 'MOTOROLA'),
(6, 'LG'),
(7, 'SONY'),
(8, 'NOKIA'),
(9, 'HUAWEI'),
(10, 'OPPO'),
(11, 'VIVO'),
(12, 'REALME'),
(13, 'GOOGLE'),
(14, 'ASUS'),
(15, 'LENOVO'),
(16, 'ZTE'),
(17, 'TCL'),
(18, 'ALCATEL'),
(19, 'HTC'),
(20, 'BLACKBERRY'),
(21, 'MEIZU'),
(22, 'HONOR'),
(23, 'MICROMAX'),
(24, 'PANASONIC'),
(25, 'INFINIX')
GO 

----INGRESAR MODELOS DE TELEFONOS 
SELECT * FROM MODELO;
INSERT INTO MODELO (IDMODELO, IDMARCA, NOMBRE) VALUES 
(1, 1, 'GALAXY S21'),
(2, 2, 'IPHONE 12'),
(3, 3, 'REDMI NOTE 10'),
(4, 4, 'ONEPLUS 9'),
(5, 5, 'MOTO G'),
(6, 6, 'LG VELVET'),
(7, 7, 'XPERIA 5'),
(8, 8, 'NOKIA 7.2'),
(9, 9, 'P40 PRO'),
(10, 10, 'RENO 6'),
(11, 11, 'VIVO X60'),
(12, 12, 'REALME 8 PRO'),
(13, 13, 'PIXEL 5'),
(14, 14, 'ROG PHONE 5'),
(15, 15, 'LEGION PHONE'),
(16, 16, 'AXON 20'),
(17, 17, '10 PRO'),
(18, 18, '1S'),
(19, 19, 'DESIRE 21 PRO'),
(20, 20, 'KEY2'),
(21, 21, '16T'),
(22, 22, 'MAGIC 3'),
(23, 23, 'IN NOTE 1'),
(24, 24, 'ELUGA X1'),
(25, 25, 'HOT 10')
GO 

----INGRESAR CLIENTES
SELECT * FROM CLIENTE;
INSERT INTO CLIENTE (CODIGO, NOMBRES, CEDULA, TELEFONO, FECHA_NAC, GENERO) VALUES 
('C001', 'JUAN PEREZ', '1234567890', '0999999999', '1980-01-01', 1),
('C002', 'MARIA GOMEZ', '0987654321', '0988888888', '1985-02-15', 2),
('C003', 'LUIS MARTINEZ', '0923344556', '0977777777', '1990-03-10', 1),
('C004', 'ANA LOPEZ', '0933445560', '0966666666', '1992-04-20', 2),
('C005', 'CARLOS DIAZ', '0944556677', '0955555555', '1988-05-30', 1),
('C006', 'LUISA TORRES', '0955667788', '0944444444', '1983-06-25', 2),
('C007', 'PEDRO SANCHEZ', '0966778899', '0933333333', '1979-07-15', 1),
('C008', 'CARMEN ORTIZ', '0977889900', '0922222222', '1995-08-05', 2),
('C009', 'JORGE VARGAS', '0988990011', '0911111111', '1984-09-12', 1),
('C010', 'ISABEL MORENO', '0999001122', '0998888888', '1991-10-01', 2),
('C011', 'GABRIEL RAMOS', '0900112233', '0987777777', '1986-11-11', 1),
('C012', 'PATRICIA CASTILLO', '0911223344', '0976666666', '1993-12-21', 2),
('C013', 'RICARDO PAREDES', '0922334455', '0965555555', '1987-01-16', 1),
('C014', 'MONICA CRUZ', '0933445566', '0954444444', '1982-02-26', 2),
('C015', 'MIGUEL HERRERA', '0944556678', '0943333333', '1994-03-18', 1),  
('C016', 'LAURA ROJAS', '0955667789', '0932222222', '1989-04-14', 2),     
('C017', 'DIEGO JIMENEZ', '0966778898', '0921111112', '1990-05-09', 1),    
('C018', 'LORENA CABRERA', '0977889902', '0910000001', '1991-06-01', 2),   
('C019', 'ALBERTO SUAREZ', '0988990012', '0989999999', '1985-07-17', 1),   
('C020', 'DIANA RUIZ', '0999001123', '0978888888', '1992-08-22', 2),       
('C021', 'FERNANDO MEDINA', '0900112234', '0967777777', '1988-09-28', 1),  
('C022', 'SOFIA FLORES', '0911223345', '0956666667', '1984-10-16', 2),     
('C023', 'ROBERTO VEGA', '0922334456', '0945555556', '1990-11-11', 1),     
('C024', 'GLORIA SERRANO', '0933445567', '0934444445', '1986-12-04', 2),   
('C025', 'JORGE SILVA', '0944556679', '0923333334', '1995-12-12', 1)
GO 

----INGRESAR TELEFONOS
SELECT * FROM TELEFONO;
INSERT INTO TELEFONO (IDTELEFONO, IDMODELO, IMEI, DESCRIPCION, ANIO, PRECIO) VALUES 
(1, 1, '356x938035643809', 'SMARTPHONE SAMSUNG GALAXY S21', 2021, 799.99),
(2, 2, '356938035643810', 'SMARTPHONE APPLE IPHONE 12', 2020, 999.99),
(3, 3, '356x938035643811', 'SMARTPHONE XIAOMI REDMI NOTE 10', 2021, 199.99),
(4, 4, '356938035643812', 'SMARTPHONE ONEPLUS 9', 2021, 729.99),
(5, 5, '356x938035643813', 'SMARTPHONE MOTOROLA MOTO G', 2021, 299.99),
(6, 6, '356938035643814', 'SMARTPHONE LG VELVET', 2021, 499.99),
(7, 7, '356x938035643815', 'SMARTPHONE SONY XPERIA 5', 2021, 899.99),
(8, 8, '356x938035643816', 'SMARTPHONE NOKIA 7.2', 2021, 249.99),
(9, 9, '356x938035643817', 'SMARTPHONE HUAWEI P40 PRO', 2020, 899.99),
(10, 10, '356938035643818', 'SMARTPHONE OPPO RENO 6', 2021, 399.99),
(11, 11, '356x938035643819', 'SMARTPHONE VIVO X60', 2021, 499.99),
(12, 12, '356938035643820', 'SMARTPHONE REALME 8 PRO', 2021, 279.99),
(13, 13, '356x938035643821', 'SMARTPHONE GOOGLE PIXEL 5', 2020, 699.99),
(14, 14, '356938035643822', 'SMARTPHONE ASUS ROG PHONE 5', 2021, 999.99),
(15, 15, '356x938035643823', 'SMARTPHONE LENOVO LEGION PHONE', 2021, 899.99),
(16, 16, '356938035643824', 'SMARTPHONE ZTE AXON 20', 2021, 399.99),
(17, 17, '356x938035643825', 'SMARTPHONE TCL 10 PRO', 2021, 449.99),
(18, 18, '356938035643826', 'SMARTPHONE ALCATEL 1S', 2021, 149.99),
(19, 19, '356x938035643827', 'SMARTPHONE HTC DESIRE 21 PRO', 2021, 329.99),
(20, 20, '356938035643828', 'SMARTPHONE BLACKBERRY KEY2', 2020, 649.99),
(21, 21, '356x938035643829', 'SMARTPHONE MEIZU 16T', 2020, 399.99),
(22, 22, '356938035643830', 'SMARTPHONE HONOR MAGIC 3', 2021, 999.99),
(23, 23, '356x938035643831', 'SMARTPHONE MICROMAX IN NOTE 1', 2021, 179.99),
(24, 24, '356938035643832', 'SMARTPHONE PANASONIC ELUGA X1', 2020, 299.99),
(25, 25, '356x938035643833', 'SMARTPHONE INFINIX HOT 10', 2021, 149.99)
GO 

----INGRESAR VENTAS DE TELEFONOS
SELECT * FROM VENTA;
INSERT INTO VENTA VALUES 
(1, 1, '2021-01-01', 799.99, 0.15, 0.00, 879.99),
(2, 2, '2021-02-15', 0.00, 0.15, 0.00, 0.00),
(3, 3, '2021-03-10', 199.99, 0.15, 0.00, 219.99),
(4, 4, '2021-04-20', 729.99, 0.15, 0.00, 801.99),
(5, 5, '2021-05-30', 299.99, 0.15, 0.00, 329.99),
(6, 6, '2021-06-25', 499.99, 0.15, 0.00, 549.99),
(7, 7, '2021-07-15', 0.00, 0.15, 0.00, 0.00),
(8, 8, '2021-08-05', 249.99, 0.15, 0.00, 274.99),
(9, 9, '2021-09-12', 899.99, 0.15, 0.00, 989.99),
(10, 10, '2021-10-01', 399.99, 0.15, 0.00, 439.99),
(11, 11, '2021-11-11', 499.99, 0.15, 0.00, 549.99),
(12, 12, '2021-12-21', 279.99, 0.15, 0.00, 307.99),
(13, 13, '2022-01-16', 699.99, 0.15, 0.00, 769.99),
(14, 14, '2022-02-26', 999.99, 0.15, 0.00, 1099.99),
(15, 15, '2022-03-18', 899.99, 0.15, 0.00, 989.99),
(16, 16, '2022-04-14', 399.99, 0.15, 0.00, 439.99),
(17, 17, '2022-05-09', 449.99, 0.15, 0.00, 494.99),
(18, 18, '2022-06-01', 149.99, 0.15, 0.00, 164.99),
(19, 19, '2022-07-17', 329.99, 0.15, 0.00, 362.99),
(20, 20, '2022-08-22', 649.99, 0.15, 0.00, 714.99),
(21, 21, '2022-09-28', 399.99, 0.15, 0.00, 439.99),
(22, 22, '2022-10-16', 999.99, 0.15, 0.00, 1099.99),
(23, 23, '2022-11-11', 179.99, 0.15, 0.00, 197.99),
(24, 24, '2022-12-04', 299.99, 0.15, 0.00, 329.99),
(25, 25, '2022-12-12', 149.99, 0.15, 0.00, 164.99) 
GO

----INGRESAR DETALLES DE VENTAS
SELECT * FROM VENTADETALLE;
INSERT INTO VENTADETALLE (IDVENTADETALLE, IDVENTA, IDTELEFONO, CANT, PRECIO, SUBTOTAL) VALUES 
(1, 1, 1, 1, 799.99, 799.99),
(2, 2, 2, 1, 999.99, 999.99),
(3, 3, 3, 1, 199.99, 199.99),
(4, 4, 4, 1, 729.99, 729.99),
(5, 5, 5, 1, 299.99, 299.99),
(6, 6, 6, 1, 499.99, 499.99),
(7, 7, 7, 1, 899.99, 899.99),
(8, 8, 8, 1, 249.99, 249.99),
(9, 9, 9, 1, 899.99, 899.99),
(10, 10, 10, 1, 399.99, 399.99),
(11, 11, 11, 1, 499.99, 499.99),
(12, 12, 12, 1, 279.99, 279.99),
(13, 13, 13, 1, 699.99, 699.99),
(14, 14, 14, 1, 999.99, 999.99),
(15, 15, 15, 1, 899.99, 899.99),
(16, 16, 16, 1, 399.99, 399.99),
(17, 17, 17, 1, 449.99, 449.99),
(18, 18, 18, 1, 149.99, 149.99),
(19, 19, 19, 1, 329.99, 329.99),
(20, 20, 20, 1, 649.99, 649.99),
(21, 21, 21, 1, 399.99, 399.99),
(22, 22, 22, 1, 999.99, 999.99),
(23, 23, 23, 1, 179.99, 179.99),
(24, 24, 24, 1, 299.99, 299.99),
(25, 25, 25, 1, 149.99, 149.99)
GO

----REALIZAR 15 EDICIONES DE REGISTROS
--ACTUALIZACION N°1
SELECT * FROM TELEFONO WHERE IDTELEFONO = 1;
UPDATE TELEFONO 
SET PRECIO = 449.99 
WHERE IDTELEFONO = 1
GO

--ACTUALIZACION N°2
SELECT * FROM CLIENTE WHERE CODIGO = 'C001';
UPDATE CLIENTE 
SET NOMBRES = 'JUAN FERNANDEZ'
WHERE CODIGO = 'C001'
GO

--ACTUALIZACION N°3
SELECT * FROM MARCA WHERE IDMARCA = 2;
UPDATE MARCA
SET NOMBRE = 'APPLE'
WHERE IDMARCA = 2
GO

--ACTUALIZACION N°4
SELECT * FROM MODELO WHERE IDMODELO = 2;
UPDATE MODELO 
SET NOMBRE = 'IPHONE 15 PRO MAX'
WHERE IDMODELO = 2
GO

--ACTUALIZACION N°5
SELECT * FROM TELEFONO WHERE IDTELEFONO = 2;
UPDATE TELEFONO 
SET DESCRIPCION = 'SMARTPHONE APPLE IPHONE 15 PRO MAX'
WHERE IDTELEFONO = 2
GO

--ACTUALIZACION N°6 
SELECT * FROM VENTA WHERE IDVENTA = 1;
UPDATE VENTA 
SET SUBTOTAL = (SELECT PRECIO FROM TELEFONO WHERE IDTELEFONO=1)
WHERE IDVENTA = 1
GO

--ACTUALIZACION N°7
SELECT * FROM TELEFONO WHERE IDTELEFONO = 4;
UPDATE TELEFONO 
SET ANIO = 2022 
WHERE IDTELEFONO = 4
GO

--ACTUALIZACION N°8
SELECT * FROM VENTADETALLE WHERE IDVENTADETALLE = 1;
UPDATE VENTADETALLE 
SET CANT = 2,
    PRECIO = (SELECT PRECIO*2 FROM TELEFONO WHERE IDTELEFONO=1),
    SUBTOTAL = (SELECT PRECIO*2 FROM TELEFONO WHERE IDTELEFONO=1)
WHERE IDVENTADETALLE = 1
GO

--ACTUALIZACION N°9
SELECT * FROM VENTA WHERE IDVENTA = 1
UPDATE VENTA 
SET SUBTOTAL = (SELECT SUM(SUBTOTAL) FROM VENTADETALLE WHERE IDVENTADETALLE=1),
    TOTAL = ((SELECT SUM(SUBTOTAL) FROM VENTADETALLE WHERE IDVENTADETALLE=1) - 0.00) +
	    (((SELECT SUM(SUBTOTAL) FROM VENTADETALLE WHERE IDVENTADETALLE=1) - 0.00)*0.15)
WHERE IDVENTA = 1
GO

--ACTUALIZACION N°10
SELECT * FROM CLIENTE WHERE CODIGO = 'C003';
UPDATE CLIENTE 
SET TELEFONO = '0999988777',
    FECHA_NAC = '1993-04-21'
WHERE CODIGO = 'C003'
GO

--ACTUALIZACION N°11
SELECT * FROM VENTA WHERE IDVENTA = 4;
UPDATE VENTA 
SET FECHA_REGISTRO = '2024-05-11'
WHERE IDVENTA = 4
GO

--ACTUALIZACION N°12
SELECT * FROM VENTA WHERE IDVENTA = 5;
UPDATE VENTA 
SET DSCTO = 60,
    TOTAL = ((SELECT SUM(SUBTOTAL) FROM VENTADETALLE WHERE IDVENTADETALLE = 5) - 60) + 
	    (((SELECT SUM(SUBTOTAL) FROM VENTADETALLE WHERE IDVENTADETALLE = 5) - 60)*0.15)
WHERE IDVENTA = 5
GO

--ACTUALIZACION N°13
SELECT * FROM VENTA WHERE IDVENTA = 3;
UPDATE VENTA 
SET FECHA_REGISTRO = '2022-01-22'
WHERE IDVENTA = 3
GO

--ACTUALIZACION N°14 
SELECT * FROM VENTA WHERE IDVENTA = 2;
UPDATE VENTA 
SET SUBTOTAL = 999.989990234375,
    IVA = (999.989990234375 - 60)*0.15,
    DSCTO = 60,
    TOTAL = (999.989990234375 - 60) + 
	    ((999.989990234375 - 60)*0.15)
WHERE IDVENTA = 2
GO

--ACTUALIZACION N°15
SELECT * FROM VENTA WHERE IDVENTA = 7;
UPDATE VENTA 
SET SUBTOTAL = (SELECT SUM(SUBTOTAL) FROM VENTADETALLE WHERE IDVENTADETALLE = 7),
    IVA = ((SELECT SUM(SUBTOTAL) FROM VENTADETALLE WHERE IDVENTADETALLE = 7) - 50)*0.15,
    DSCTO = 50,
    TOTAL = ((SELECT SUM(SUBTOTAL) FROM VENTADETALLE WHERE IDVENTADETALLE = 7) - 50) + 
	    (((SELECT SUM(SUBTOTAL) FROM VENTADETALLE WHERE IDVENTADETALLE = 7) - 50)*0.15)
WHERE IDVENTA = 7
GO

----REALIZAR 1O ELIMINACIONES DE REGISTROS

----ELIMINACION N°1
-----QUIERO ELIMINAR UN CLIENTE ASI QUE MODIFICO UNA VENTA PARA QUE UN CLIENTE NO CUENTE CON VENTAS ANTERIORES
UPDATE VENTA 
SET IDCLIENTE = 1 
WHERE IDVENTA = 20
-----PROCEDO A ELIMINAR A LA CLIENTA DIANA RUIZ ID=20
DELETE FROM CLIENTE 
WHERE IDCLIENTE = 20
GO

----ELIMINACION N°2
SELECT * FROM VENTA ORDER BY IDVENTA ASC
SELECT * FROM VENTADETALLE ORDER BY IDVENTADETALLE ASC
-----QUIERO ELIMINAR EL ULTIMO DETALLE DE VENTA
DELETE FROM VENTADETALLE 
WHERE IDVENTADETALLE = 25
GO

----ELIMINACION N°3
-----AHORA QUE PUEDO QUIERO ELIMINAR LA ULTIMA VENTA
DELETE FROM VENTA 
WHERE IDVENTA = (SELECT MAX(IDVENTA) FROM VENTA)
GO

----ELIMINACION N°4
DELETE FROM VENTADETALLE 
WHERE PRECIO = 249.99
GO

----ELIMINACION N°5
DELETE FROM VENTA 
WHERE TOTAL >= 250 AND 
      TOTAL <= 275
GO

----ELIMINACION N°6
DELETE FROM TELEFONO 
WHERE IMEI LIKE '%16'
GO

----ELIMINACION N°7
DELETE FROM MODELO 
WHERE NOMBRE LIKE 'N%'
GO

----ELIMINACION N°8
DELETE FROM MARCA 
WHERE IDMARCA = 8
GO

----ELIMINACION N°9
DELETE FROM CLIENTE 
WHERE NOMBRES LIKE 'C%' AND 
      GENERO = 2
GO

----ELIMINACION N°10
UPDATE VENTA 
SET IDCLIENTE = 15 
WHERE SUBTOTAL < 175
DELETE FROM CLIENTE 
WHERE IDCLIENTE = 18
GO

----RECUPERACION DE DATOS (SELECT)
----1. Consultar todos los campos de la tabla telefono con sus correspondiente nombre marca y modelo. 
SELECT T.IDTELEFONO 'CODIGO',
       T.IMEI,
       T.DESCRIPCION 'TELEFONO',
       MD.NOMBRE 'MODELO',
       MR.NOMBRE 'MARCA',
       T.ANIO 'ANIO_FABRICACION',
       T.PRECIO 'PRECIO_TELEFONO'
FROM TELEFONO T,
     MODELO MD,
	 MARCA MR
WHERE MD.IDMODELO = T.IDMODELO AND
      MR.IDMARCA = MD.IDMARCA
GO

----2. Consultar todos los clientes, debe presentar el nombre de cliente, edad y el sexo transformado (1=hombre, 2 mujer)
SELECT C.CODIGO,
       C.NOMBRES AS CLIENTE,
       DATEDIFF(YEAR, 
	        FECHA_NAC, 
                GETDATE()) AS EDAD,
       CASE 
           WHEN C.GENERO = 1 THEN 'HOMBRE'
           WHEN C.GENERO = 2 THEN 'MUJER'
       END AS SEXO
FROM CLIENTE C
GO

----3. Consultar todos los modelos de teléfono con la cantidad de teléfonos que tiene asociado. 
SELECT MD.IDMODELO AS CODIGO, 
       MD.NOMBRE AS MODELO,
       COUNT(T.IDTELEFONO) AS CANT_TELEFONOS
FROM MODELO MD
LEFT JOIN TELEFONO T ON MD.IDMODELO = T.IDMODELO
GROUP BY MD.IDMODELO,
         MD.NOMBRE
ORDER BY CANT_TELEFONOS
GO

----4. Consultar cuales han sido los teléfonos que nunca han sido vendidos.
SELECT T.IDTELEFONO AS CODIGO,
       T.DESCRIPCION AS TELEFONO,
       MD.NOMBRE AS MODELO,
       MR.NOMBRE AS MARCA,
       T.PRECIO AS PRECIO_TELEFONO,
       VD.CANT AS CANTIDAD,
       VD.SUBTOTAL,
       VD.PRECIO AS PRECIO_VENTA
FROM TELEFONO T
LEFT JOIN VENTADETALLE VD ON T.IDTELEFONO = VD.IDTELEFONO
JOIN MODELO MD ON T.IDMODELO = MD.IDMODELO 
JOIN MARCA MR ON MD.IDMARCA = MR.IDMARCA
WHERE VD.IDVENTADETALLE IS NULL
GO

----5. Consultar los teléfonos que su número de imei empiece con un número y termine en una vocal, que su precio esté entre 300 a 500$ y que no hayan sido vendido más de 5 veces. 
SELECT T.IDTELEFONO AS CODIGO,
       T.IMEI,
       T.DESCRIPCION AS TELEFONO,
       T.PRECIO AS PRECIO_TELEFONO
FROM TELEFONO T
INNER JOIN VENTADETALLE VD ON T.IDTELEFONO = VD.IDTELEFONO
WHERE (T.IMEI LIKE '[0-9]%' OR
       T.IMEI LIKE '%[AEIOUaeiou]') AND 
       T.PRECIO BETWEEN 300 AND 500 AND
       (SELECT SUM(CANT)
        FROM VENTADETALLE
        WHERE IDTELEFONO = T.IDTELEFONO) <= 5
GROUP BY T.IDTELEFONO,
         T.IMEI,
         T.DESCRIPCION,
         T.PRECIO 
GO

----6. Consultar cuál ha sido la marca de teléfono que más se ha vendido. 
SELECT TOP 1 MR.IDMARCA AS CODIGO,
             MR.NOMBRE AS MARCA,
	     SUM(VD.CANT) AS TOTAL_VENDIDO
FROM MARCA MR
JOIN MODELO MD ON MD.IDMARCA = MR.IDMARCA
JOIN TELEFONO T ON T.IDMODELO = MD.IDMODELO
JOIN VENTADETALLE VD ON VD.IDTELEFONO = T.IDTELEFONO
GROUP BY MR.IDMARCA,
         MR.NOMBRE
ORDER BY TOTAL_VENDIDO DESC
GO

----7. Consultar cuál ha sido el teléfono que más se ha comprado con respecto a su total. 
SELECT TOP 1 T.IMEI,
             T.DESCRIPCION AS TELEFONO,
	     MD.NOMBRE AS MODELO,
	     MR.NOMBRE AS MARCA,
             SUM(VD.CANT) AS TOTAL_COMPRADO
FROM TELEFONO T
INNER JOIN VENTADETALLE VD ON T.IDTELEFONO = VD.IDTELEFONO
INNER JOIN MODELO MD ON T.IDMODELO = MD.IDMODELO
INNER JOIN MARCA MR ON MD.IDMARCA = MR.IDMARCA
GROUP BY T.IMEI,
         T.DESCRIPCION,
         MD.NOMBRE,
         MR.NOMBRE
ORDER BY TOTAL_COMPRADO DESC
GO

----8. Consultar cuál ha sido el cliente que más y menos teléfonos ha comprado con respecto a la cantidad comprada. 
WITH COMPRACLIENTES AS (
     SELECT C.CODIGO,
	    C.NOMBRES AS CLIENTE,
	    COUNT(VD.IDTELEFONO) AS CANTIDAD_COMPRA,
	    ROW_NUMBER() OVER (ORDER BY COUNT(VD.IDTELEFONO) DESC) AS COMPRA_MAX,
	    ROW_NUMBER() OVER (ORDER BY COUNT(VD.IDTELEFONO) ASC) AS COMPRA_MIN
     FROM CLIENTE C
     INNER JOIN VENTA VT ON VT.IDCLIENTE = C.IDCLIENTE
     INNER JOIN VENTADETALLE VD ON VD.IDVENTA = VT.IDVENTA
     GROUP BY C.CODIGO,
	      C.NOMBRES
) 

SELECT CODIGO,
       CLIENTE,
       CANTIDAD_COMPRA
FROM COMPRACLIENTES
WHERE COMPRA_MAX = 1 OR
      COMPRA_MIN = 1
GO

----9. Consultar cuál ha sido el género que más teléfonos ha comprado.
SELECT TOP 1 
       CASE 
           WHEN C.GENERO = 1 THEN 'HOMBRE'
           WHEN C.GENERO = 2 THEN 'MUJER'
       END AS GENERO,
       COUNT(VD.IDTELEFONO) AS CANTIDAD_COMPRADA
FROM CLIENTE C
INNER JOIN VENTA VT ON VT.IDCLIENTE = C.IDCLIENTE
INNER JOIN VENTADETALLE VD ON VD.IDVENTA = VT.IDVENTA
GROUP BY C.GENERO
ORDER BY CANTIDAD_COMPRADA DESC
GO

----10. Consultar el nombre de los clientes y el total de venta agrupado, se debe presentar solo los que superen los 300$.
SELECT C.CODIGO AS CODIGO_CLIENTE,
       C.NOMBRES AS CLIENTE,
       SUM(VT.TOTAL) AS TOTAL_VENTA
FROM CLIENTE C
INNER JOIN VENTA VT ON C.IDCLIENTE = VT.IDCLIENTE
GROUP BY C.CODIGO,
         C.NOMBRES
HAVING SUM(VT.TOTAL) > 300
GO 

----FORMATOS Y VISTAS
----CREAR PARA CADA TABLA UNA VISTA Y RELACIONAR LAS TABLAS QUE ESTEN RELACIONADAS ENTRE SI
--VISTA PARA TABLA DE MARCAS
CREATE VIEW VIEW_MARCA AS
SELECT MR.IDMARCA AS CODIGO,
       MR.NOMBRE AS MARCA
FROM MARCA MR
GO

--VISTA PARA TABLA DE MODELOS
CREATE VIEW VIEW_MODELO AS
SELECT MD.IDMODELO AS CODIGO,
       MD.NOMBRE AS MODELO,
       MR.NOMBRE AS MARCA
FROM MODELO MD
INNER JOIN MARCA MR 
ON MD.IDMARCA = MR.IDMARCA
GO

--VISTA PARA TABLA DE TELEFONOS
CREATE VIEW VIEW_TELEFONO AS
SELECT T.IDTELEFONO AS CODIGO,
       T.IMEI,
       T.DESCRIPCION AS TELEFONO,
       MD.NOMBRE AS MODELO,
       MR.NOMBRE AS MARCA,
       T.ANIO AS ANIO_LANZAMIENTO,
       T.PRECIO AS PRECIO_TELEFONO
FROM TELEFONO T
INNER JOIN MODELO MD ON T.IDMODELO = MD.IDMODELO
INNER JOIN MARCA MR ON MD.IDMARCA = MR.IDMARCA
GO

--VISTA PARA TABLA DE CLIENTES
CREATE VIEW VIEW_CLIENTE AS
SELECT C.CODIGO,
       C.NOMBRES AS CLIENTE,
       C.CEDULA,
       C.TELEFONO,
       C.FECHA_NAC AS NACIMIENTO,
       CASE 
           WHEN C.GENERO = 1 THEN 'HOMBRE'
           WHEN C.GENERO = 2 THEN 'MUJER'
       END AS GENERO
FROM CLIENTE C
GO

--VISTA PARA TABLA DE VENTAS 
CREATE VIEW VIEW_VENTA AS
SELECT VT.IDVENTA AS NUM_VENTA,
       C.CODIGO AS CODIGO_CLIENTE,
       C.NOMBRES AS CLIENTE,
       C.CEDULA,
       C.TELEFONO,
       VT.FECHA_REGISTRO AS FECHA_VENTA,
       VT.SUBTOTAL,
       VT.IVA,
       VT.DSCTO AS DESCUENTO,
       VT.TOTAL
FROM VENTA VT
INNER JOIN CLIENTE C
ON VT.IDCLIENTE = C.IDCLIENTE
GO

--VISTA PARA TABLA DE DETALLE DE VENTAS
CREATE VIEW VIEW_VENTADETALLE AS
SELECT VD.IDVENTADETALLE AS CODIGO,
       C.CODIGO AS CODIGO_CLIENTE,
       C.NOMBRES AS CLIENTE,
       VT.FECHA_REGISTRO AS FECHA_VENTA,
       T.DESCRIPCION AS TELEFONO,
       T.IMEI AS IMEI_TELEFONO,
       T.PRECIO AS PRECIO_TELEFONO,
       VD.CANT AS CANTIDAD,
       VD.PRECIO AS PRECIO_VENTA,
       VD.SUBTOTAL,
       VT.SUBTOTAL AS SUBTOTAL_VENTA,
       VT.IVA,
       VT.DSCTO AS DESCUENTO,
       VT.TOTAL
FROM VENTADETALLE VD
INNER JOIN VENTA VT ON VD.IDVENTA = VT.IDVENTA
INNER JOIN TELEFONO T ON VD.IDTELEFONO = T.IDTELEFONO
INNER JOIN CLIENTE C ON VT.IDCLIENTE = C.IDCLIENTE
GO

----VISUALIZAR VISTAS CREADAS
SELECT * FROM VIEW_MARCA ORDER BY CODIGO ASC

SELECT * FROM VIEW_MODELO

SELECT * FROM VIEW_TELEFONO

SELECT * FROM VIEW_CLIENTE

SELECT * FROM VIEW_VENTA

SELECT * FROM VIEW_VENTADETALLE
GO

----PROCEDIMIENTOS ALMACENADOS
----1. Crear un procedimiento para registrar a un cliente
CREATE PROCEDURE REGISTRAR_CLIENTE (
   @CODIGO VARCHAR(8),
   @NOMBRES VARCHAR(100),
   @CEDULA VARCHAR(10),
   @TELEFONO VARCHAR(10),
   @FECHA_NAC DATE,
   @GENERO INT
)
AS 
BEGIN
    BEGIN TRY
        --Verificar si el código o cédula ya existe
        IF EXISTS (SELECT 1 FROM CLIENTE WHERE CODIGO = @CODIGO OR CEDULA = @CEDULA)
        BEGIN
            RAISERROR('El código o la cédula ya existe', 16, 1)
            RETURN
        END
        --Si la fecha de nacimiento es nula, tomar la fecha actual
        IF @FECHA_NAC IS NULL
        BEGIN
            SET @FECHA_NAC = GETDATE()
        END
        --Insertar el nuevo cliente
        INSERT INTO CLIENTE (CODIGO, NOMBRES, CEDULA, TELEFONO, FECHA_NAC, GENERO)
        VALUES (@CODIGO, @NOMBRES, @CEDULA, @TELEFONO, @FECHA_NAC, @GENERO)
    END TRY
    BEGIN CATCH
        --Manejo de errores
        DECLARE @ErrorMessage NVARCHAR(4000)
        SET @ErrorMessage = ERROR_MESSAGE()
        RAISERROR(@ErrorMessage, 16, 1)
    END CATCH
END
GO

----2. Crear un procedimiento para registrar o editar un teléfono
CREATE PROCEDURE EDITAR_TELEFONO (
   @IMEI VARCHAR(20),
   @NOM_MODELO VARCHAR(100),
   @DESCRIPCION VARCHAR(500),
   @ANIO INT,
   @PRECIO REAL
)
AS
BEGIN
    DECLARE @IDMODELO INT

    --Buscar el ID del modelo
    SELECT @IDMODELO = IDMODELO 
	FROM MODELO 
	WHERE NOMBRE = @NOM_MODELO

    --Si el modelo no existe, seleccionar uno aleatorio
    IF @IDMODELO IS NULL
    BEGIN
        SELECT TOP 1 @IDMODELO = IDMODELO 
	FROM MODELO 
	ORDER BY NEWID()
    END

    --Verificar si el IMEI ya existe
    IF EXISTS (SELECT 1 FROM TELEFONO WHERE IMEI = @IMEI)
    BEGIN
        --Actualizar teléfono
        UPDATE TELEFONO
        SET IDMODELO = @IDMODELO,
            DESCRIPCION = @DESCRIPCION,
            ANIO = @ANIO,
            PRECIO = @PRECIO
        WHERE IMEI = @IMEI
    END
    ELSE
    BEGIN
        --Insertar nuevo teléfono
        INSERT INTO TELEFONO (IDMODELO, IMEI, DESCRIPCION, ANIO, PRECIO)
        VALUES (@IDMODELO, @IMEI, @DESCRIPCION, @ANIO, @PRECIO)
    END
END
GO

----3. Crear un procedimiento de salida para retornar el total vendido de un cliente
CREATE PROCEDURE TOTAL_VENTA_CLIENTE (@CEDULA VARCHAR(10))
AS
BEGIN
    DECLARE @TOTAL REAL = 0

    --Obtener el total vendido
    SELECT @TOTAL = ISNULL(SUM(TOTAL), 0)
    FROM VENTA V
    JOIN CLIENTE C ON V.IDCLIENTE = C.IDCLIENTE
    WHERE C.CEDULA = @CEDULA

    --Retornar el total vendido
    SELECT @TOTAL AS TOTAL_VENDIDO
END
GO

----4. Crear un procedimiento de salida para retornar la cantidad de veces que fue vendido un teléfono
CREATE PROCEDURE VENTA_TELEFONO (@IMEI VARCHAR(20))
AS
BEGIN
    DECLARE @CANTIDAD INT = 0
    DECLARE @IDTELEFONO INT

    --Obtener ID del teléfono por IMEI
    SELECT @IDTELEFONO = IDTELEFONO 
	FROM TELEFONO 
	WHERE IMEI = @IMEI

    --Si el IMEI existe, contar las ventas
    IF @IDTELEFONO IS NOT NULL
    BEGIN
        SELECT @CANTIDAD = COUNT(*) 
		FROM VENTADETALLE 
		WHERE IDTELEFONO = @IDTELEFONO
    END

    --Retornar la cantidad de ventas
    SELECT @CANTIDAD AS CANTIDAD_VENTAS
END
GO 

----5. Crear un procedimiento para listar los teléfonos comprados por un cliente
CREATE PROCEDURE LISTAR_TELEFONOS_CLIENTE (@CODIGO VARCHAR(8))
AS
BEGIN
    --Obtener la lista de teléfonos comprados por el cliente
    SELECT T.IMEI,
           T.DESCRIPCION,
           T.ANIO,
           T.PRECIO AS PRECIO_TELEFONO,
           VD.CANT AS CANTIDAD
    FROM TELEFONO T
    JOIN VENTADETALLE VD ON VD.IDTELEFONO = T.IDTELEFONO
    JOIN VENTA VT ON VD.IDVENTA = VT.IDVENTA
    JOIN CLIENTE C ON VT.IDCLIENTE = C.IDCLIENTE
    WHERE C.CODIGO = @CODIGO
    ORDER BY VT.FECHA_REGISTRO DESC --Ordenar por la fecha de compra más reciente
END
GO

----USAR PROCEDIMIENTOS ALMACENADOS CREADOS
--Registrar un Cliente
EXEC REGISTRAR_CLIENTE 
     @CODIGO = 'C026',
     @NOMBRES = 'KADIR BARQUET',
     @CEDULA = '0932175227',
     @TELEFONO = '0998222804',
     @FECHA_NAC = '2001-09-11',
     @GENERO = 1
GO

--Registrar o Editar un Teléfono
EXEC EDITAR_TELEFONO
     @IMEI = '356938035643810',
     @NOM_MODELO = 'IPHONE 15 PRO MAX',
     @DESCRIPCION = 'SMARTPHONE APPLE IPHONE 15',
     @ANIO = 2024,
     @PRECIO = 859.99
GO

--Obtener el Total Vendido por un Cliente
EXEC TOTAL_VENTA_CLIENTE
     @CEDULA = '1234567890'
GO

--Obtener la Cantidad de Veces que fue Vendido un Teléfono
EXEC VENTA_TELEFONO
     @IMEI = '356x938035643809'
GO

--Listar los Teléfonos Comprados por un Cliente
EXEC LISTAR_TELEFONOS_CLIENTE
     @CODIGO = 'C001'
GO

----FUNCIONES
----1. Crear una función para retornar la cantidad de teléfonos que tiene un cliente con tan solo enviar su número de cédula, si no existe el cliente debe retornar 0.
CREATE FUNCTION CANT_TELEFONO_CLIENTE (@CEDULA VARCHAR(10))
RETURNS INT
AS
BEGIN
     DECLARE @CANTIDAD INT = 0;

     SELECT @CANTIDAD = COUNT(DISTINCT T.IDTELEFONO)
     FROM CLIENTE C
     JOIN VENTA VT ON VT.IDCLIENTE = C.IDCLIENTE
     JOIN VENTADETALLE VD ON VD.IDVENTA = VT.IDVENTA
     JOIN TELEFONO T ON VD.IDTELEFONO = T.IDTELEFONO

     RETURN @CANTIDAD;
END;
GO

----2. Crear una función para retornar la cantidad de ventas realizadas (contar) entre 2 rangos de fechas enviadas como parámetros.
CREATE FUNCTION CANT_VENTA_FECHA (@FECHA_INICIO DATE, @FECHA_FIN DATE)
RETURNS INT
AS
BEGIN
     DECLARE @CANTIDAD INT = 0;

     SELECT @CANTIDAD = COUNT(*)
     FROM VENTA 
     WHERE FECHA_REGISTRO BETWEEN @FECHA_INICIO AND @FECHA_FIN;

     RETURN @CANTIDAD;
END;
GO

----3. Crear una función para retornar el total de ventas de una marca enviada como parámetro (nombre).
CREATE FUNCTION TOTAL_VENTA_MARCA (@NOM_MARCA VARCHAR(100))
RETURNS REAL
AS
BEGIN
     DECLARE @TOTAL_VENTA REAL = 0;

     SELECT @TOTAL_VENTA = SUM(VD.SUBTOTAL)
     FROM MARCA MR
     JOIN MODELO MD ON MD.IDMARCA = MR.IDMARCA
     JOIN TELEFONO T ON T.IDMODELO = MD.IDMODELO
     JOIN VENTADETALLE VD ON VD.IDTELEFONO = T.IDTELEFONO
     WHERE MR.NOMBRE = @NOM_MARCA;

     RETURN @TOTAL_VENTA;
END;
GO

----4. Crear una función para retornar el total de ventas de un género de cliente enviado como parámetro.
CREATE FUNCTION TOTAL_VENTA_GENERO (@GENERO VARCHAR(10))
RETURNS REAL
AS
BEGIN
     DECLARE @TOTAL_VENTA REAL;

     SELECT @TOTAL_VENTA = SUM(VT.TOTAL)
     FROM CLIENTE C
     JOIN VENTA VT ON VT.IDCLIENTE = C.IDCLIENTE
     WHERE C.GENERO = CASE 
	                  WHEN UPPER(@GENERO) = 'MASCULINO' THEN 1
			  WHEN UPPER(@GENERO) = 'FEMENINO' THEN 2
			  ELSE NULL
		      END;
	 
      IF @TOTAL_VENTA IS NULL
      BEGIN 
           SET @TOTAL_VENTA = 0;
      END

      RETURN @TOTAL_VENTA;
END;
GO

----5. Crear una función para retornar el total acumulado de ventas de un año enviado como parámetros.
CREATE FUNCTION TOTAL_VENTA_ANIO (@ANIO INT)
RETURNS REAL
AS
BEGIN
     DECLARE @TOTAL_VENTA REAL;

     SELECT @TOTAL_VENTA = SUM(TOTAL)
     FROM VENTA 
     WHERE YEAR(FECHA_REGISTRO) = @ANIO;

     IF @TOTAL_VENTA IS NULL
     BEGIN
          SET @TOTAL_VENTA = 0;
     END

     RETURN @TOTAL_VENTA;
END;
GO

----USAR FUNCIONES CREADAS
SELECT dbo.CANT_TELEFONO_CLIENTE('1234567890') AS CANT_TELEFONO_CLIENTE;

SELECT dbo.CANT_VENTA_FECHA('2022-01-01', '2022-12-31') AS CANT_VENTA_FECHA;

SELECT dbo.TOTAL_VENTA_MARCA('SAMSUNG') AS TOTAL_VENTA_MARCA;

SELECT dbo.TOTAL_VENTA_GENERO('MASCULINO') AS TOTAL_VENTA_GENERO;

SELECT dbo.TOTAL_VENTA_ANIO(2021) AS TOTAL_VENTA_ANIO
GO

--USO DE FUNCION EN CONSULTA COMPLEJA
--obtener todos los clientes que tienen más de 2 teléfonos registrados
SELECT CODIGO_CLIENTE = CODIGO,
       CLIENTE = NOMBRES,
       CANT_TELEFONO = dbo.CANT_TELEFONO_CLIENTE(CEDULA)
FROM CLIENTE 
WHERE dbo.CANT_TELEFONO_CLIENTE(CEDULA) > 2
GO

----DISPARADORES (TRIGGERS)
----Crear tablas de auditoría para las tablas de teléfono, modelo, marca y cliente.

--AUDITORIA PARA TELEFONO
CREATE TABLE AUDITORIA_TELEFONO (
  IDAUDITORIA INT IDENTITY NOT NULL,
  IDTELEFONO INT,
  IDMODELO INT,
  IMEI VARCHAR(20),
  DESCRIPCION VARCHAR(500),
  ANIO INT,
  PRECIO REAL,
  FECHA DATE DEFAULT GETDATE(),
  USUARIO VARCHAR(50),
  MAQUINA VARCHAR(50),
  ACCION CHAR(1),
  PRIMARY KEY(IDAUDITORIA)
)
GO

--AUDITORIA PARA MODELO
CREATE TABLE AUDITORIA_MODELO (
  IDAUDITORIA INT IDENTITY NOT NULL,
  IDMODELO INT,
  IDMARCA INT,
  NOMBRE VARCHAR(100),
  FECHA DATE DEFAULT GETDATE(),
  USUARIO VARCHAR(50),
  MAQUINA VARCHAR(50),
  ACCION CHAR(1),
  PRIMARY KEY(IDAUDITORIA)
)
GO

--AUDITORIA PARA MARCA
CREATE TABLE AUDITORIA_MARCA (
  IDAUDITORIA INT IDENTITY NOT NULL,
  IDMARCA INT,
  NOMBRE VARCHAR(100),
  FECHA DATE DEFAULT GETDATE(),
  USUARIO VARCHAR(50),
  MAQUINA VARCHAR(50),
  ACCION CHAR(1),
  PRIMARY KEY(IDAUDITORIA)
)
GO

--AUDITORIA PARA CLIENTE
CREATE TABLE AUDITORIA_CLIENTE (
  IDAUDITORIA INT IDENTITY NOT NULL,
  IDCLIENTE INT,
  CODIGO VARCHAR(8),
  NOMBRES VARCHAR(100),
  CEDULA VARCHAR(10),
  TELEFONO VARCHAR(10),
  FECHA_NAC DATE,
  GENERO INT,
  FECHA DATE DEFAULT GETDATE(),
  USUARIO VARCHAR(50),
  MAQUINA VARCHAR(50),
  ACCION CHAR(1),
  PRIMARY KEY(IDAUDITORIA)
)
GO

----Las acciones de la auditoría crear, editar y eliminar.
----TRIGGERS PARA CADA AUDITORIA

--TRIGGER PARA AUDITORIA TELEFONO
CREATE TRIGGER TR_AUDITORIA_TELEFONO
ON TELEFONO
AFTER INSERT, UPDATE, DELETE
AS
BEGIN
    SET NOCOUNT ON;

    --Insertar en la tabla de auditoría para INSERT
    INSERT INTO AUDITORIA_TELEFONO (IDTELEFONO, IDMODELO, IMEI, DESCRIPCION, ANIO, PRECIO, FECHA, USUARIO, MAQUINA, ACCION)
    SELECT IDTELEFONO, 
           IDMODELO, 
           IMEI, 
           DESCRIPCION, 
           ANIO, 
           PRECIO, 
           GETDATE(), 
           SYSTEM_USER, 
           HOST_NAME(), 
           'I'
    FROM INSERTED;

    --Insertar en la tabla de auditoría para UPDATE
    INSERT INTO AUDITORIA_TELEFONO (IDTELEFONO, IDMODELO, IMEI, DESCRIPCION, ANIO, PRECIO, FECHA, USUARIO, MAQUINA, ACCION)
    SELECT I.IDTELEFONO, 
           I.IDMODELO, 
           I.IMEI, 
           I.DESCRIPCION, 
           I.ANIO, 
           I.PRECIO, 
           GETDATE(), 
           SYSTEM_USER, 
           HOST_NAME(), 
           'U'
    FROM INSERTED I
    INNER JOIN DELETED D ON I.IDTELEFONO = D.IDTELEFONO;

    --Insertar en la tabla de auditoría para DELETE
    INSERT INTO AUDITORIA_TELEFONO (IDTELEFONO, IDMODELO, IMEI, DESCRIPCION, ANIO, PRECIO, FECHA, USUARIO, MAQUINA, ACCION)
    SELECT D.IDTELEFONO, 
           D.IDMODELO, 
           D.IMEI, 
           D.DESCRIPCION, 
           D.ANIO, 
           D.PRECIO, 
           GETDATE(), 
           SYSTEM_USER, 
           HOST_NAME(), 
           'D'
    FROM DELETED D;
END
GO

--TRIGGER PARA AUDITORIA MODELO
CREATE TRIGGER TR_AUDITORIA_MODELO
ON MODELO
AFTER INSERT, UPDATE, DELETE
AS
BEGIN
     SET NOCOUNT ON

	  --Insertar en la tabla de auditoría para INSERT
	  INSERT INTO AUDITORIA_MODELO (IDMODELO, IDMARCA, NOMBRE, FECHA, USUARIO, MAQUINA, ACCION)
	  SELECT IDMODELO, 
	         IDMARCA, 
		 NOMBRE, 
		 GETDATE(), 
	         SYSTEM_USER, 
	         HOST_NAME(), 'I'
	  FROM INSERTED
	  
	  --Insertar en la tabla de auditoría para UPDATE
	  INSERT INTO AUDITORIA_MODELO (IDMODELO, IDMARCA, NOMBRE, FECHA, USUARIO, MAQUINA, ACCION)
	  SELECT I.IDMODELO, 
	         I.IDMARCA, 
		 I.NOMBRE, 
		 GETDATE(), 
		 SYSTEM_USER, 
		 HOST_NAME(), 'U'
	  FROM INSERTED I
	  JOIN DELETED D ON I.IDMODELO = D.IDMODELO

	  --Insertar en la tabla de auditoría para DELETE
	  INSERT INTO AUDITORIA_MODELO (IDMODELO, IDMARCA, NOMBRE, FECHA, USUARIO, MAQUINA, ACCION)
	  SELECT IDMODELO, 
	         IDMARCA, 
		 NOMBRE, 
		 GETDATE(), 
		 SYSTEM_USER, 
		 HOST_NAME(), 'D'
	  FROM DELETED 
END
GO

--TRIGGER PARA AUDITORIA MARCA
CREATE TRIGGER TR_AUDITORIA_MARCA
ON MARCA
AFTER INSERT, UPDATE, DELETE
AS
BEGIN
     SET NOCOUNT ON

	 --Insertar en la tabla de auditoría para INSERT
	 INSERT INTO AUDITORIA_MARCA (IDMARCA, NOMBRE, FECHA, USUARIO, MAQUINA, ACCION)
	 SELECT IDMARCA, 
	        NOMBRE, 
		GETDATE(), 
		SYSTEM_USER, 
		HOST_NAME(), 'I'
	 FROM INSERTED 

	 --Insertar en la tabla de auditoría para UPDATE
	 INSERT INTO AUDITORIA_MARCA (IDMARCA, NOMBRE, FECHA, USUARIO, MAQUINA, ACCION)
	 SELECT I.IDMARCA,
	        I.NOMBRE,
		GETDATE(),
		SYSTEM_USER,
		HOST_NAME(), 'U'
	 FROM INSERTED I
	 JOIN DELETED D ON I.IDMARCA = D.IDMARCA

	 --Insertar en la tabla de auditoría para DELETE
	 INSERT INTO AUDITORIA_MARCA (IDMARCA, NOMBRE, FECHA, USUARIO, MAQUINA, ACCION)
	 SELECT IDMARCA,
	        NOMBRE,
		GETDATE(),
		SYSTEM_USER,
		HOST_NAME(), 'D'
	 FROM DELETED 
END
GO

--TRIGGER PARA AUDITORIA CLIENTE
CREATE TRIGGER TR_AUDITORIA_CLIENTE
ON CLIENTE
AFTER INSERT, UPDATE, DELETE
AS
BEGIN
     SET NOCOUNT ON

	 --Insertar en la tabla de auditoría para INSERT
     INSERT INTO AUDITORIA_CLIENTE (IDCLIENTE, CODIGO, NOMBRES, CEDULA, TELEFONO, FECHA_NAC, GENERO, FECHA, USUARIO, MAQUINA, ACCION)
     SELECT IDCLIENTE, 
	        CODIGO, 
		NOMBRES, 
		CEDULA, 
		TELEFONO, 
		FECHA_NAC, 
		GENERO, 
		GETDATE(), 
		SYSTEM_USER, 
		HOST_NAME(), 'I'
     FROM INSERTED

	 --Insertar en la tabla de auditoría para UPDATE
	 INSERT INTO AUDITORIA_CLIENTE (IDCLIENTE, CODIGO, NOMBRES, CEDULA, TELEFONO, FECHA_NAC, GENERO, FECHA, USUARIO, MAQUINA, ACCION)
	 SELECT I.IDCLIENTE, 
	        I.CODIGO, 
		I.NOMBRES, 
		I.CEDULA, 
		I.TELEFONO, 
		I.FECHA_NAC, 
		I.GENERO, 
		GETDATE(), 
		SYSTEM_USER, 
		HOST_NAME(), 'U'
	 FROM INSERTED I
	 JOIN DELETED D ON I.IDCLIENTE = D.IDCLIENTE

	 --Insertar en la tabla de auditoría para DELETE
	 INSERT INTO AUDITORIA_CLIENTE (IDCLIENTE, CODIGO, NOMBRES, CEDULA, TELEFONO, FECHA_NAC, GENERO, FECHA, USUARIO, MAQUINA, ACCION)
	 SELECT IDCLIENTE, 
	        CODIGO, 
		NOMBRES, 
		CEDULA, 
		TELEFONO, 
		FECHA_NAC, 
		GENERO, 
		GETDATE(), 
		SYSTEM_USER, 
		HOST_NAME(), 'D'
	 FROM DELETED 
END
GO

----VER TODOS LOS TRIGGERS CREADOS
SELECT *
FROM sys.triggers
GO

SELECT 
    OBJECT_DEFINITION(OBJECT_ID('TR_AUDITORIA_TELEFONO')) AS TRIGGER_DEFINITION
GO

SELECT 
    t.name AS TRIGGER_NAME,
    t.type_desc AS TRIGGER_TYPE,
    t.create_date AS CREATE_DATE,
    t.modify_date AS MODIFY_DATE
FROM sys.triggers t
JOIN sys.tables tbl ON t.parent_id = tbl.object_id
WHERE tbl.name IN ('TELEFONO', 
                   'MODELO', 
		   'MARCA', 
		   'CLIENTE')
GO

----VISUALIZAR MAQUINA DONDE SE REALIZO EL TRABAJO
SELECT HOST_NAME() 'SERVIDOR',
       SUSER_SNAME() 'NOMBRE DE MAQUINA'
GO

----BACKUP DE BD
BACKUP DATABASE VENTA_TELEFONOS
TO DISK = 'C:\SQL_FILES\VENTA_TELEFONOS.bak'
GO

